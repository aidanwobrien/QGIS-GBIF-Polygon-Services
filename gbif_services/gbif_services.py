# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GBIFServices
                                 A QGIS plugin
 Use the GBIF API to get all species occurence point records within a polygon layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-06
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Aidan O'Brien
        email                : aidan.w.obrien@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QDialog
from qgis.utils import iface
from qgis.core import Qgis, QgsMessageLog, QgsProject, QgsGeometry



# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .gbif_services_dialog import GBIFServicesDialog
import os.path
from .gbif_worker import (
    create_unique_gbif_group,
    create_progress_dialog,
    create_clipping_progress_dialog,
    fetch_gbif_data,
    create_gbif_layer,
    clipping,
    WarningDialog,
    LayerDialog
)

class GBIFServices:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GBIFServices_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GBIF Services')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GBIFServices', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/gbif_services/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GBIF Services'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GBIF Services'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        if self.first_start:
            self.first_start = False
            # Optional: Initialize a dialog for plugin settings
            # self.dlg = GBIFServicesDialog()

        # Show warning dialog first
        warn_str = (
            "Please note large queries will take longer and may crash QGIS.\n"
            "A maximum of 100,000 records can be retrieved at one time."
        )
        warn_dialog = WarningDialog(warn_str)

        if warn_dialog.exec_() != QDialog.Accepted:
            print("User cancelled GBIF services script")
            QgsMessageLog.logMessage("User cancelled GBIF Services script", "GBIF-Services", level=Qgis.Info)
            return

        # Now prompt user to select a polygon layer
        layer_dialog = LayerDialog()
        if layer_dialog.exec_() != QDialog.Accepted:
            print("No layer selected!")
            iface.messageBar().pushMessage("Error", "No layer selected!", level=Qgis.Info)
            return  # user cancelled selection

        selected_layer, layer_name = layer_dialog.get_selected_layer()
        if not selected_layer:
            return

        pyqgis_group = create_unique_gbif_group()

        for feature in selected_layer.getFeatures():
            layer_id = feature.id()
            geometry = feature.geometry()


            # Get the bounding box and count the total records to be fetched
            extent = geometry.boundingBox()
            min_x, min_y = extent.xMinimum(), extent.yMinimum()
            max_x, max_y = extent.xMaximum(), extent.yMaximum()
            
            count_url = (
                'https://api.gbif.org/v1/occurrence/search?'
                f'geometry=POLYGON(({min_x}%20{min_y},{max_x}%20{min_y},{max_x}%20{max_y},{min_x}%20{max_y},{min_x}%20{min_y}))'
                '&limit=0'
            )
            count_data = fetch_gbif_data(count_url)
            total_estimate = min(count_data.get('count', 0), 100000)

            # Initialize progress dialog
            progress = create_progress_dialog(total_estimate)

            if geometry.isMultipart():
                for polygon in geometry.asMultiPolygon():
                    geom = QgsGeometry.fromPolygonXY(polygon)
                    result_layer, total_records = create_gbif_layer(geom, layer_id, progress)
                    if total_records > 0:
                        clipping_result = clipping(result_layer, selected_layer, layer_id, pyqgis_group)
            else:
                result_layer, total_records = create_gbif_layer(geometry, layer_id, progress)
            
                if total_records > 0:
                    clipping_result = clipping(result_layer, selected_layer, layer_id, pyqgis_group)

        if not progress.wasCanceled() and clipping_result is not None:
            print("GBIF Query Complete")
            QgsMessageLog.logMessage("GBIF Query Complete", "GBIF-Services", level=Qgis.Info)

        else:
            print("GBIF Query Cancelled")
            QgsMessageLog.logMessage("GBIF Query Cancelled", "GBIF-Services", level=Qgis.Info)

